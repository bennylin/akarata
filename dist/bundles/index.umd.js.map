{"version":3,"file":"index.umd.js","sources":["../../src/lib/irregular-words.ts","../../src/lib/stemmer-utility.ts","../../src/lib/morphological-utility.ts","../../src/stemmer.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable:no-any\n\nexport default class IrregularWords {\n  static SPECIAL_LETTERS = ['K', 'P', 'N', 'R']\n  static ENDS_WITH_I = IrregularWords.loadWords('akhiran-i')\n\n  static ENDS_WITH_COMMON_CHARACTERS = {\n    kah: IrregularWords.loadWords('kah'),\n    lah: IrregularWords.loadWords('lah'),\n    pun: IrregularWords.loadWords('pun'),\n    ku: IrregularWords.loadWords('ku'),\n    mu: IrregularWords.loadWords('mu'),\n    nya: IrregularWords.loadWords('nya'),\n  }\n\n  static ENDS_WITH_SUFFIX_CHARACTERS = ['majikan'].concat(\n    IrregularWords.ENDS_WITH_I\n  )\n  static ON_PREFIX_CHARACTERS: any\n\n  static loadWords(filename: string, chopped = false) {\n    let contents: string[] = require(`./irregular-words/${filename}`).default\n\n    if (chopped) {\n      contents = contents.map((word) => word.slice(1, word.length))\n    }\n\n    return contents\n  }\n}\n\nIrregularWords.SPECIAL_LETTERS.map((letter) => {\n  // console.log(letter);\n  ;(IrregularWords as any)[`BEGINS_WITH_${letter}`] = IrregularWords.loadWords(\n    `${letter.toLowerCase()}`,\n    true\n  )\n})\n;(IrregularWords as any).ON_PREFIX_CHARACTERS = {\n  meng: (IrregularWords as any).BEGINS_WITH_K,\n  peng: (IrregularWords as any).BEGINS_WITH_K,\n  mem: (IrregularWords as any).BEGINS_WITH_P,\n  pem: (IrregularWords as any).BEGINS_WITH_P,\n}\n","function isStartsWith(\n  text: string,\n  byTextLength: number,\n  prefix: string\n): boolean {\n  const prefixLength = prefix.length\n  if (prefixLength > byTextLength) return false\n  for (let i = 0; i < prefixLength; i++) {\n    if (text[i] !== prefix[i]) return false\n  }\n\n  return true\n}\n\nfunction isEndsWith(\n  text: string,\n  byTextLength: number,\n  suffix: string\n): boolean {\n  const suffixLength = suffix.length\n  if (suffixLength > byTextLength) return false\n  for (let i = 0; i < suffixLength; i++) {\n    if (text.substring(text.length - suffixLength)[i] !== suffix[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport interface PositionType {\n  isStartsWith: string\n  isEndsWith: string\n}\n\nexport default {\n  isStartsWith,\n  isEndsWith,\n}\n","// tslint:disable:no-any\nimport IrregularWords from './irregular-words'\nimport StemmerUtility, { PositionType } from './stemmer-utility'\n\ntype Characters = string[]\n\nconst AMBIGUOUS_WORDS = [\n  'nyanyi',\n  'nyala',\n  'nyata',\n  'nasehat',\n  'makan',\n  'minum',\n  'nikah',\n]\n\nenum Position {\n  start = 'Start',\n  end = 'End',\n}\nexport default class MorphologicalUtility {\n  static VOWEL = ['a', 'e', 'i', 'o', 'u']\n  static PARTICLE_CHARACTERS = ['kah', 'lah', 'pun']\n  static POSSESSIVE_PRONOUN_CHARACTERS = ['ku', 'mu', 'nya']\n  static FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'meny',\n    'men',\n    'mem',\n    'me',\n    'peng',\n    'peny',\n    'pen',\n    'pem',\n    'di',\n    'ter',\n    'ke',\n  ]\n  static SPECIAL_FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'peng',\n    'meny',\n    'peny',\n    'pen',\n    'men',\n    'mem',\n    'pem',\n  ]\n  static SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'be', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['be']\n  static NON_SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_WORDS = ['belajar', 'pelajar', 'belunjur']\n  static SUFFIX_CHARACTERS = ['kan', 'an', 'i']\n  static WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS = [\n    'meny',\n    'peny',\n    'men',\n    'pen',\n  ]\n\n  static REMOVED_KE = 1\n  static REMOVED_PENG = 2\n  static REMOVED_DI = 4\n  static REMOVED_MENG = 8\n  static REMOVED_TER = 16\n  static REMOVED_BER = 32\n  static REMOVED_PE = 64\n\n  numberOfSyllables = 0\n  private _flags: any\n\n  set flags(v: any) {\n    this._flags = v\n  }\n\n  get flags() {\n    return this._flags\n  }\n\n  totalSyllables = (word: string) => {\n    let result = 0\n\n    for (const value of word) {\n      if (this.isVowel(value)) result++\n    }\n\n    return result\n  }\n\n  removeParticle = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('particle'),\n      Position.end\n    )\n\n    return word\n  }\n\n  removePossessivePronoun = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('possessive_pronoun'),\n      Position.end\n    )\n  }\n\n  removeFirstOrderPrefix = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const prevWord = word\n    word = this.removeAndSubstituteCharactersMatchingCollection(\n      word,\n      this.collectionFor('special_first_order_prefix'),\n      Position.start\n    )\n    if (prevWord !== word) {\n      return word\n    }\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('first_order_prefix'),\n      Position.start\n    )\n\n    return word\n  }\n\n  removeSecondOrderPrefix = (word: string) => {\n    const {\n      REMOVED_BER,\n      SPECIAL_SECOND_ORDER_PREFIX_WORDS,\n    } = MorphologicalUtility\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const wordLength = word.length\n    if (SPECIAL_SECOND_ORDER_PREFIX_WORDS.includes(word)) {\n      if (word.slice(0, 2) === 'be') {\n        this.flags = this.flags || REMOVED_BER\n      }\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 3, Position.start)\n\n      return word\n    }\n\n    if (\n      StemmerUtility.isStartsWith(word, wordLength, 'be') &&\n      wordLength > 4 &&\n      !this.isVowel(word[2]) &&\n      word.slice(3, 5) === 'er'\n    ) {\n      this.flags = this.flags || REMOVED_BER\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 2, Position.start)\n\n      return word\n    }\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('non_special_second_order_prefix'),\n      Position.start\n    )\n  }\n\n  removeSuffix = (word: string) => {\n    const {\n      REMOVED_KE,\n      REMOVED_PENG,\n      REMOVED_PE,\n      REMOVED_DI,\n      REMOVED_MENG,\n      REMOVED_TER,\n      REMOVED_BER,\n      SUFFIX_CHARACTERS,\n    } = MorphologicalUtility\n    if (this.ambiguousWithSufficesEndingWords(word)) return word\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    let constantToCheck: number[] = []\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < SUFFIX_CHARACTERS.length; index++) {\n      const character = SUFFIX_CHARACTERS[index]\n      switch (character) {\n        case 'kan':\n          constantToCheck = [REMOVED_KE, REMOVED_PENG, REMOVED_PE]\n          break\n        case 'an':\n          constantToCheck = [REMOVED_DI, REMOVED_MENG, REMOVED_TER]\n          break\n\n        case 'i':\n          constantToCheck = [REMOVED_BER, REMOVED_KE, REMOVED_PENG]\n          break\n\n        default:\n          break\n      }\n\n      if (\n        StemmerUtility.isEndsWith(word, word.length, character) &&\n        // tslint:disable-next-line:no-bitwise\n        constantToCheck.every((cons) => (this.flags & cons) === 0)\n      ) {\n        this.reduceSyllable()\n        word = this.sliceWordAtPosition(word, character.length, Position.end)\n      }\n    }\n\n    return word\n  }\n\n  private ambiguousWithSufficesEndingWords(word: string) {\n    return IrregularWords.ENDS_WITH_SUFFIX_CHARACTERS.includes(word)\n  }\n\n  private removeCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      if (\n        this.matchPositionAndNotAmbiguousWithCharacters(\n          word,\n          characters,\n          position\n        )\n      ) {\n        if (characters === 'mem' && this.isVowel(word[characters.length])) {\n          continue\n        }\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n\n        word = this.sliceWordAtPosition(word, characters.length, position)\n      }\n    }\n\n    return word\n  }\n\n  private sliceWordAtPosition(\n    word: string,\n    characterSize: number,\n    position: string\n  ) {\n    const multiplier = position === Position.start ? 0 : -1\n\n    const wordSlice = word.split('')\n    wordSlice.splice(multiplier * characterSize, characterSize)\n    word = wordSlice.join('')\n\n    return word\n  }\n\n  private removeAndSubstituteCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      const matched = this.matchingCharactersRequiresSubstitution(\n        word,\n        characters,\n        position\n      )\n      if (matched) {\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n        word = this.substituteWordCharacter(word, characters)\n        word = this.sliceWordAtPosition(\n          word,\n          characters.length - 1,\n          Position.start\n        )\n      }\n    }\n\n    return word\n  }\n\n  private matchingCharactersRequiresSubstitution(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    return (\n      this.matchCharactersPositionFollowedByVowel(word, characters, position) &&\n      this.substitutionRequired(word, characters)\n    )\n  }\n\n  private matchCharactersPositionFollowedByVowel(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const wordLength = word.length\n    const characterSize = characters.length\n    const Pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[Pos as keyof PositionType](word, wordLength, characters) &&\n      wordLength > characterSize &&\n      this.isVowel(word[characterSize])\n    )\n  }\n\n  private substitutionRequired(word: string, characters: string) {\n    return (\n      MorphologicalUtility.WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS.includes(\n        characters\n      ) || this.containsIrregularPrefix(word, characters)\n    )\n  }\n\n  private containsIrregularPrefix(word: string, characters: string) {\n    const irregularOnPrefix = Object.keys(\n      IrregularWords.ON_PREFIX_CHARACTERS\n    ).includes(characters)\n    if (irregularOnPrefix) {\n      return this.choppedWordMatchWordsCollection(\n        word.slice(characters.length, word.length),\n        IrregularWords.ON_PREFIX_CHARACTERS[characters]\n      )\n    }\n\n    return false\n  }\n\n  private substituteWordCharacter(word: string, characters: string) {\n    let substituteChar = ''\n    switch (true) {\n      case ['meny', 'peny'].includes(characters):\n        substituteChar = 's'\n        break\n      case ['men', 'pen'].includes(characters):\n        substituteChar = this.choppedWordMatchWordsCollection(\n          word.slice(characters.length, word.length),\n          (IrregularWords as any).BEGINS_WITH_N\n        )\n          ? 'n'\n          : 't'\n        break\n      case ['meng', 'peng'].includes(characters):\n        substituteChar = 'k'\n        break\n      case ['mem', 'pem'].includes(characters):\n        substituteChar = 'p'\n        break\n\n      default:\n        break\n    }\n    const reduceChars = characters.length - 1\n    const firstChar = word.slice(-word.length, reduceChars)\n    const oldSubstituteChar = word[reduceChars]\n    const resChar = word.slice(characters.length)\n\n    return substituteChar ? firstChar + substituteChar + resChar : word\n  }\n\n  private isVowel(character: string) {\n    return MorphologicalUtility.VOWEL.includes(character)\n  }\n\n  private collectionFor(name: string, type = 'characters') {\n    let constantName\n    const col1 = ['meny', 'men', 'mem', 'me']\n    const col2 = ['peny', 'pen', 'pem']\n    if (type === 'characters') {\n      constantName = `${name}_${type}`\n    } else {\n      switch (true) {\n        case col1.includes(name):\n          name = 'meng'\n          break\n        case col2.includes(name):\n          name = 'peng'\n          break\n\n        default:\n          break\n      }\n      constantName = `${type}_${name}`\n    }\n    const staticMethod = constantName.toUpperCase()\n\n    const collection: Characters = (MorphologicalUtility as any)[staticMethod]\n\n    return collection\n  }\n\n  private matchPositionAndNotAmbiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[pos as keyof PositionType](\n        word,\n        word.length,\n        characters\n      ) && !this.ambiguousWithCharacters(word, characters, position)\n    )\n  }\n\n  private ambiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    if (position === Position.start) {\n      if (characters === 'per') {\n        return this.choppedWordMatchWordsCollection(\n          word.slice(3, word.length),\n          (IrregularWords as any).BEGINS_WITH_R\n        )\n      } else {\n        return false\n      }\n    } else {\n      return (IrregularWords.ENDS_WITH_COMMON_CHARACTERS as any)[\n        characters\n      ].some((ambiguousWord: string) => {\n        const prefix = ['me', 'be', 'pe']\n        if (!prefix.includes(word.slice(0, 2))) {\n          return false\n        }\n\n        return StemmerUtility.isEndsWith(word, word.length, ambiguousWord)\n      })\n    }\n  }\n\n  private choppedWordMatchWordsCollection(\n    choppedWord: string,\n    collection: Characters\n  ) {\n    return collection.some((word) =>\n      StemmerUtility.isStartsWith(choppedWord, choppedWord.length, word)\n    )\n  }\n\n  private reduceSyllable() {\n    this.numberOfSyllables -= 1\n  }\n}\n","import MorphologicalUtility from './lib/morphological-utility'\n\nclass Stemmer extends MorphologicalUtility {\n  stem = (word: string, derivationalStemming = true) => {\n    this.flags = undefined\n    if (word.match(/\\s/)) {\n      word.split(' ').map((w) => this.stem(w))\n    } else {\n      this.numberOfSyllables = this.totalSyllables(word)\n      if (this.isStillHasManySyllables()) {\n        word = this.removeParticle(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removePossessivePronoun(word)\n      }\n      if (derivationalStemming) {\n        word = this.stemDerivational(word)\n      }\n    }\n\n    return word\n  }\n\n  private stemDerivational(word: string) {\n    let prevSize = word.length\n    if (this.isStillHasManySyllables()) {\n      word = this.removeFirstOrderPrefix(word)\n    }\n    if (prevSize !== word.length) {\n      prevSize = word.length\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n      if (prevSize !== word.length) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n    } else {\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n    }\n\n    return word\n  }\n\n  private isStillHasManySyllables() {\n    return this.numberOfSyllables > 2\n  }\n}\n\nexport default new Stemmer()\n","import stemmer from './stemmer'\n\nexport const { stem } = stemmer\nexport default { stem }\n"],"names":["tslib_1.__extends"],"mappings":"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"}