{"version":3,"file":"index.esm.js","sources":["../../src/lib/irregular-words.ts","../../src/lib/stemmer-utility.ts","../../src/lib/morphological-utility.ts","../../src/stemmer.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable:no-any\n\nexport default class IrregularWords {\n  static SPECIAL_LETTERS = ['K', 'P', 'N', 'R']\n  static ENDS_WITH_I = IrregularWords.loadWords('akhiran-i')\n\n  static ENDS_WITH_COMMON_CHARACTERS = {\n    kah: IrregularWords.loadWords('kah'),\n    lah: IrregularWords.loadWords('lah'),\n    pun: IrregularWords.loadWords('pun'),\n    ku: IrregularWords.loadWords('ku'),\n    mu: IrregularWords.loadWords('mu'),\n    nya: IrregularWords.loadWords('nya'),\n  }\n\n  static ENDS_WITH_SUFFIX_CHARACTERS = ['majikan'].concat(\n    IrregularWords.ENDS_WITH_I\n  )\n  static ON_PREFIX_CHARACTERS: any\n\n  static loadWords(filename: string, chopped = false) {\n    let contents: string[] = require(`./irregular-words/${filename}`).default\n\n    if (chopped) {\n      contents = contents.map((word) => word.slice(1, word.length))\n    }\n\n    return contents\n  }\n}\n\nIrregularWords.SPECIAL_LETTERS.map((letter) => {\n  // console.log(letter);\n  ;(IrregularWords as any)[`BEGINS_WITH_${letter}`] = IrregularWords.loadWords(\n    `${letter.toLowerCase()}`,\n    true\n  )\n})\n;(IrregularWords as any).ON_PREFIX_CHARACTERS = {\n  meng: (IrregularWords as any).BEGINS_WITH_K,\n  peng: (IrregularWords as any).BEGINS_WITH_K,\n  mem: (IrregularWords as any).BEGINS_WITH_P,\n  pem: (IrregularWords as any).BEGINS_WITH_P,\n}\n","function isStartsWith(\n  text: string,\n  byTextLength: number,\n  prefix: string\n): boolean {\n  const prefixLength = prefix.length\n  if (prefixLength > byTextLength) return false\n  for (let i = 0; i < prefixLength; i++) {\n    if (text[i] !== prefix[i]) return false\n  }\n\n  return true\n}\n\nfunction isEndsWith(\n  text: string,\n  byTextLength: number,\n  suffix: string\n): boolean {\n  const suffixLength = suffix.length\n  if (suffixLength > byTextLength) return false\n  for (let i = 0; i < suffixLength; i++) {\n    if (text.substring(text.length - suffixLength)[i] !== suffix[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport interface PositionType {\n  isStartsWith: string\n  isEndsWith: string\n}\n\nexport default {\n  isStartsWith,\n  isEndsWith,\n}\n","// tslint:disable:no-any\nimport IrregularWords from './irregular-words'\nimport StemmerUtility, { PositionType } from './stemmer-utility'\n\ntype Characters = string[]\n\nconst AMBIGUOUS_WORDS = [\n  'nyanyi',\n  'nyala',\n  'nyata',\n  'nasehat',\n  'makan',\n  'minum',\n  'nikah',\n]\n\nenum Position {\n  start = 'Start',\n  end = 'End',\n}\nexport default class MorphologicalUtility {\n  static VOWEL = ['a', 'e', 'i', 'o', 'u']\n  static PARTICLE_CHARACTERS = ['kah', 'lah', 'pun']\n  static POSSESSIVE_PRONOUN_CHARACTERS = ['ku', 'mu', 'nya']\n  static FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'meny',\n    'men',\n    'mem',\n    'me',\n    'peng',\n    'peny',\n    'pen',\n    'pem',\n    'di',\n    'ter',\n    'ke',\n  ]\n  static SPECIAL_FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'peng',\n    'meny',\n    'peny',\n    'pen',\n    'men',\n    'mem',\n    'pem',\n  ]\n  static SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'be', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['be']\n  static NON_SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_WORDS = ['belajar', 'pelajar', 'belunjur']\n  static SUFFIX_CHARACTERS = ['kan', 'an', 'i']\n  static WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS = [\n    'meny',\n    'peny',\n    'men',\n    'pen',\n  ]\n\n  static REMOVED_KE = 1\n  static REMOVED_PENG = 2\n  static REMOVED_DI = 4\n  static REMOVED_MENG = 8\n  static REMOVED_TER = 16\n  static REMOVED_BER = 32\n  static REMOVED_PE = 64\n\n  numberOfSyllables = 0\n  private _flags: any\n\n  set flags(v: any) {\n    this._flags = v\n  }\n\n  get flags() {\n    return this._flags\n  }\n\n  totalSyllables = (word: string) => {\n    let result = 0\n\n    for (const value of word) {\n      if (this.isVowel(value)) result++\n    }\n\n    return result\n  }\n\n  removeParticle = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('particle'),\n      Position.end\n    )\n\n    return word\n  }\n\n  removePossessivePronoun = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('possessive_pronoun'),\n      Position.end\n    )\n  }\n\n  removeFirstOrderPrefix = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const prevWord = word\n    word = this.removeAndSubstituteCharactersMatchingCollection(\n      word,\n      this.collectionFor('special_first_order_prefix'),\n      Position.start\n    )\n    if (prevWord !== word) {\n      return word\n    }\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('first_order_prefix'),\n      Position.start\n    )\n\n    return word\n  }\n\n  removeSecondOrderPrefix = (word: string) => {\n    const {\n      REMOVED_BER,\n      SPECIAL_SECOND_ORDER_PREFIX_WORDS,\n    } = MorphologicalUtility\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const wordLength = word.length\n    if (SPECIAL_SECOND_ORDER_PREFIX_WORDS.includes(word)) {\n      if (word.slice(0, 2) === 'be') {\n        this.flags = this.flags || REMOVED_BER\n      }\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 3, Position.start)\n\n      return word\n    }\n\n    if (\n      StemmerUtility.isStartsWith(word, wordLength, 'be') &&\n      wordLength > 4 &&\n      !this.isVowel(word[2]) &&\n      word.slice(3, 5) === 'er'\n    ) {\n      this.flags = this.flags || REMOVED_BER\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 2, Position.start)\n\n      return word\n    }\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('non_special_second_order_prefix'),\n      Position.start\n    )\n  }\n\n  removeSuffix = (word: string) => {\n    const {\n      REMOVED_KE,\n      REMOVED_PENG,\n      REMOVED_PE,\n      REMOVED_DI,\n      REMOVED_MENG,\n      REMOVED_TER,\n      REMOVED_BER,\n      SUFFIX_CHARACTERS,\n    } = MorphologicalUtility\n    if (this.ambiguousWithSufficesEndingWords(word)) return word\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    let constantToCheck: number[] = []\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < SUFFIX_CHARACTERS.length; index++) {\n      const character = SUFFIX_CHARACTERS[index]\n      switch (character) {\n        case 'kan':\n          constantToCheck = [REMOVED_KE, REMOVED_PENG, REMOVED_PE]\n          break\n        case 'an':\n          constantToCheck = [REMOVED_DI, REMOVED_MENG, REMOVED_TER]\n          break\n\n        case 'i':\n          constantToCheck = [REMOVED_BER, REMOVED_KE, REMOVED_PENG]\n          break\n\n        default:\n          break\n      }\n\n      if (\n        StemmerUtility.isEndsWith(word, word.length, character) &&\n        // tslint:disable-next-line:no-bitwise\n        constantToCheck.every((cons) => (this.flags & cons) === 0)\n      ) {\n        this.reduceSyllable()\n        word = this.sliceWordAtPosition(word, character.length, Position.end)\n      }\n    }\n\n    return word\n  }\n\n  private ambiguousWithSufficesEndingWords(word: string) {\n    return IrregularWords.ENDS_WITH_SUFFIX_CHARACTERS.includes(word)\n  }\n\n  private removeCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      if (\n        this.matchPositionAndNotAmbiguousWithCharacters(\n          word,\n          characters,\n          position\n        )\n      ) {\n        if (characters === 'mem' && this.isVowel(word[characters.length])) {\n          continue\n        }\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n\n        word = this.sliceWordAtPosition(word, characters.length, position)\n      }\n    }\n\n    return word\n  }\n\n  private sliceWordAtPosition(\n    word: string,\n    characterSize: number,\n    position: string\n  ) {\n    const multiplier = position === Position.start ? 0 : -1\n\n    const wordSlice = word.split('')\n    wordSlice.splice(multiplier * characterSize, characterSize)\n    word = wordSlice.join('')\n\n    return word\n  }\n\n  private removeAndSubstituteCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      const matched = this.matchingCharactersRequiresSubstitution(\n        word,\n        characters,\n        position\n      )\n      if (matched) {\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n        word = this.substituteWordCharacter(word, characters)\n        word = this.sliceWordAtPosition(\n          word,\n          characters.length - 1,\n          Position.start\n        )\n      }\n    }\n\n    return word\n  }\n\n  private matchingCharactersRequiresSubstitution(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    return (\n      this.matchCharactersPositionFollowedByVowel(word, characters, position) &&\n      this.substitutionRequired(word, characters)\n    )\n  }\n\n  private matchCharactersPositionFollowedByVowel(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const wordLength = word.length\n    const characterSize = characters.length\n    const Pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[Pos as keyof PositionType](word, wordLength, characters) &&\n      wordLength > characterSize &&\n      this.isVowel(word[characterSize])\n    )\n  }\n\n  private substitutionRequired(word: string, characters: string) {\n    return (\n      MorphologicalUtility.WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS.includes(\n        characters\n      ) || this.containsIrregularPrefix(word, characters)\n    )\n  }\n\n  private containsIrregularPrefix(word: string, characters: string) {\n    const irregularOnPrefix = Object.keys(\n      IrregularWords.ON_PREFIX_CHARACTERS\n    ).includes(characters)\n    if (irregularOnPrefix) {\n      return this.choppedWordMatchWordsCollection(\n        word.slice(characters.length, word.length),\n        IrregularWords.ON_PREFIX_CHARACTERS[characters]\n      )\n    }\n\n    return false\n  }\n\n  private substituteWordCharacter(word: string, characters: string) {\n    let substituteChar = ''\n    switch (true) {\n      case ['meny', 'peny'].includes(characters):\n        substituteChar = 's'\n        break\n      case ['men', 'pen'].includes(characters):\n        substituteChar = this.choppedWordMatchWordsCollection(\n          word.slice(characters.length, word.length),\n          (IrregularWords as any).BEGINS_WITH_N\n        )\n          ? 'n'\n          : 't'\n        break\n      case ['meng', 'peng'].includes(characters):\n        substituteChar = 'k'\n        break\n      case ['mem', 'pem'].includes(characters):\n        substituteChar = 'p'\n        break\n\n      default:\n        break\n    }\n    const reduceChars = characters.length - 1\n    const firstChar = word.slice(-word.length, reduceChars)\n    const oldSubstituteChar = word[reduceChars]\n    const resChar = word.slice(characters.length)\n\n    return substituteChar ? firstChar + substituteChar + resChar : word\n  }\n\n  private isVowel(character: string) {\n    return MorphologicalUtility.VOWEL.includes(character)\n  }\n\n  private collectionFor(name: string, type = 'characters') {\n    let constantName\n    const col1 = ['meny', 'men', 'mem', 'me']\n    const col2 = ['peny', 'pen', 'pem']\n    if (type === 'characters') {\n      constantName = `${name}_${type}`\n    } else {\n      switch (true) {\n        case col1.includes(name):\n          name = 'meng'\n          break\n        case col2.includes(name):\n          name = 'peng'\n          break\n\n        default:\n          break\n      }\n      constantName = `${type}_${name}`\n    }\n    const staticMethod = constantName.toUpperCase()\n\n    const collection: Characters = (MorphologicalUtility as any)[staticMethod]\n\n    return collection\n  }\n\n  private matchPositionAndNotAmbiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[pos as keyof PositionType](\n        word,\n        word.length,\n        characters\n      ) && !this.ambiguousWithCharacters(word, characters, position)\n    )\n  }\n\n  private ambiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    if (position === Position.start) {\n      if (characters === 'per') {\n        return this.choppedWordMatchWordsCollection(\n          word.slice(3, word.length),\n          (IrregularWords as any).BEGINS_WITH_R\n        )\n      } else {\n        return false\n      }\n    } else {\n      return (IrregularWords.ENDS_WITH_COMMON_CHARACTERS as any)[\n        characters\n      ].some((ambiguousWord: string) => {\n        const prefix = ['me', 'be', 'pe']\n        if (!prefix.includes(word.slice(0, 2))) {\n          return false\n        }\n\n        return StemmerUtility.isEndsWith(word, word.length, ambiguousWord)\n      })\n    }\n  }\n\n  private choppedWordMatchWordsCollection(\n    choppedWord: string,\n    collection: Characters\n  ) {\n    return collection.some((word) =>\n      StemmerUtility.isStartsWith(choppedWord, choppedWord.length, word)\n    )\n  }\n\n  private reduceSyllable() {\n    this.numberOfSyllables -= 1\n  }\n}\n","import MorphologicalUtility from './lib/morphological-utility'\n\nclass Stemmer extends MorphologicalUtility {\n  stem = (word: string, derivationalStemming = true) => {\n    this.flags = undefined\n    if (word.match(/\\s/)) {\n      word.split(' ').map((w) => this.stem(w))\n    } else {\n      this.numberOfSyllables = this.totalSyllables(word)\n      if (this.isStillHasManySyllables()) {\n        word = this.removeParticle(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removePossessivePronoun(word)\n      }\n      if (derivationalStemming) {\n        word = this.stemDerivational(word)\n      }\n    }\n\n    return word\n  }\n\n  private stemDerivational(word: string) {\n    let prevSize = word.length\n    if (this.isStillHasManySyllables()) {\n      word = this.removeFirstOrderPrefix(word)\n    }\n    if (prevSize !== word.length) {\n      prevSize = word.length\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n      if (prevSize !== word.length) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n    } else {\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n    }\n\n    return word\n  }\n\n  private isStillHasManySyllables() {\n    return this.numberOfSyllables > 2\n  }\n}\n\nexport default new Stemmer()\n","import stemmer from './stemmer'\n\nexport const { stem } = stemmer\nexport default { stem }\n"],"names":[],"mappings":"AAAA;AAEA,MAAqB,cAAc;IAkBjC,OAAO,SAAS,CAAC,QAAgB,EAAE,OAAO,GAAG,KAAK;QAChD,IAAI,QAAQ,GAAa,OAAO,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAA;QAEzE,IAAI,OAAO,EAAE;YACX,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;SAC9D;QAED,OAAO,QAAQ,CAAA;KAChB;;AAzBM,8BAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;AACtC,0BAAW,GAAG,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;AAEnD,0CAA2B,GAAG;IACnC,GAAG,EAAE,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;IACpC,GAAG,EAAE,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;IACpC,GAAG,EAAE,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;IACpC,EAAE,EAAE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAClC,EAAE,EAAE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAClC,GAAG,EAAE,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;CACrC,CAAA;AAEM,0CAA2B,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CACrD,cAAc,CAAC,WAAW,CAC3B,CAAA;AAcH,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM;IAEtC,cAAsB,CAAC,eAAe,MAAM,EAAE,CAAC,GAAG,cAAc,CAAC,SAAS,CAC1E,GAAG,MAAM,CAAC,WAAW,EAAE,EAAE,EACzB,IAAI,CACL,CAAA;CACF,CAAC,CACD;AAAC,cAAsB,CAAC,oBAAoB,GAAG;IAC9C,IAAI,EAAG,cAAsB,CAAC,aAAa;IAC3C,IAAI,EAAG,cAAsB,CAAC,aAAa;IAC3C,GAAG,EAAG,cAAsB,CAAC,aAAa;IAC1C,GAAG,EAAG,cAAsB,CAAC,aAAa;CAC3C,CAAA;;AC3CD,SAAS,YAAY,CACnB,IAAY,EACZ,YAAoB,EACpB,MAAc;IAEd,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAA;IAClC,IAAI,YAAY,GAAG,YAAY;QAAE,OAAO,KAAK,CAAA;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAA;KACxC;IAED,OAAO,IAAI,CAAA;CACZ;AAED,SAAS,UAAU,CACjB,IAAY,EACZ,YAAoB,EACpB,MAAc;IAEd,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAA;IAClC,IAAI,YAAY,GAAG,YAAY;QAAE,OAAO,KAAK,CAAA;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE;YAC/D,OAAO,KAAK,CAAA;SACb;KACF;IAED,OAAO,IAAI,CAAA;CACZ;AAOD,qBAAe;IACb,YAAY;IACZ,UAAU;CACX,CAAA;;ACtCD;AACA,AAeA,IAAK,QAGJ;AAHD,WAAK,QAAQ;IACX,2BAAe,CAAA;IACf,uBAAW,CAAA;CACZ,EAHI,QAAQ,KAAR,QAAQ,QAGZ;AACD,MAAqB,oBAAoB;IAAzC;QAgDE,sBAAiB,GAAG,CAAC,CAAA;QAWrB,mBAAc,GAAG,CAAC,IAAY;YAC5B,IAAI,MAAM,GAAG,CAAC,CAAA;YAEd,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE;gBACxB,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBAAE,MAAM,EAAE,CAAA;aAClC;YAED,OAAO,MAAM,CAAA;SACd,CAAA;QAED,mBAAc,GAAG,CAAC,IAAY;YAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAE5E,IAAI,GAAG,IAAI,CAAC,kCAAkC,CAC5C,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAC9B,QAAQ,CAAC,GAAG,CACb,CAAA;YAED,OAAO,IAAI,CAAA;SACZ,CAAA;QAED,4BAAuB,GAAG,CAAC,IAAY;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAE5E,OAAO,IAAI,CAAC,kCAAkC,CAC5C,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EACxC,QAAQ,CAAC,GAAG,CACb,CAAA;SACF,CAAA;QAED,2BAAsB,GAAG,CAAC,IAAY;YACpC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC5E,MAAM,QAAQ,GAAG,IAAI,CAAA;YACrB,IAAI,GAAG,IAAI,CAAC,+CAA+C,CACzD,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,EAChD,QAAQ,CAAC,KAAK,CACf,CAAA;YACD,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACrB,OAAO,IAAI,CAAA;aACZ;YAED,IAAI,GAAG,IAAI,CAAC,kCAAkC,CAC5C,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EACxC,QAAQ,CAAC,KAAK,CACf,CAAA;YAED,OAAO,IAAI,CAAA;SACZ,CAAA;QAED,4BAAuB,GAAG,CAAC,IAAY;YACrC,MAAM,EACJ,WAAW,EACX,iCAAiC,GAClC,GAAG,oBAAoB,CAAA;YACxB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAA;YAC9B,IAAI,iCAAiC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACpD,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;oBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,WAAW,CAAA;iBACvC;gBACD,IAAI,CAAC,cAAc,EAAE,CAAA;gBACrB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAA;gBAExD,OAAO,IAAI,CAAA;aACZ;YAED,IACE,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC;gBACnD,UAAU,GAAG,CAAC;gBACd,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EACzB;gBACA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,WAAW,CAAA;gBACtC,IAAI,CAAC,cAAc,EAAE,CAAA;gBACrB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAA;gBAExD,OAAO,IAAI,CAAA;aACZ;YAED,OAAO,IAAI,CAAC,kCAAkC,CAC5C,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,iCAAiC,CAAC,EACrD,QAAQ,CAAC,KAAK,CACf,CAAA;SACF,CAAA;QAED,iBAAY,GAAG,CAAC,IAAY;YAC1B,MAAM,EACJ,UAAU,EACV,YAAY,EACZ,UAAU,EACV,UAAU,EACV,YAAY,EACZ,WAAW,EACX,WAAW,EACX,iBAAiB,GAClB,GAAG,oBAAoB,CAAA;YACxB,IAAI,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC;gBAAE,OAAO,IAAI,CAAA;YAC5D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC5E,IAAI,eAAe,GAAa,EAAE,CAAA;;YAElC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC7D,MAAM,SAAS,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAA;gBAC1C,QAAQ,SAAS;oBACf,KAAK,KAAK;wBACR,eAAe,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,UAAU,CAAC,CAAA;wBACxD,MAAK;oBACP,KAAK,IAAI;wBACP,eAAe,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,WAAW,CAAC,CAAA;wBACzD,MAAK;oBAEP,KAAK,GAAG;wBACN,eAAe,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,YAAY,CAAC,CAAA;wBACzD,MAAK;oBAEP;wBACE,MAAK;iBACR;gBAED,IACE,cAAc,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;;oBAEvD,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,CAAC,EAC1D;oBACA,IAAI,CAAC,cAAc,EAAE,CAAA;oBACrB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAA;iBACtE;aACF;YAED,OAAO,IAAI,CAAA;SACZ,CAAA;KAoPF;IAlYC,IAAI,KAAK,CAAC,CAAM;QACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;KAChB;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAA;KACnB;IA0IO,gCAAgC,CAAC,IAAY;QACnD,OAAO,cAAc,CAAC,2BAA2B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;KACjE;IAEO,kCAAkC,CACxC,IAAY,EACZ,UAAsB,EACtB,QAAgB;;QAGhB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;YACpC,IACE,IAAI,CAAC,0CAA0C,CAC7C,IAAI,EACJ,UAAU,EACV,QAAQ,CACT,EACD;gBACA,IAAI,UAAU,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;oBACjE,SAAQ;iBACT;gBACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;gBACpE,IAAI,CAAC,cAAc,EAAE,CAAA;gBAErB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;aACnE;SACF;QAED,OAAO,IAAI,CAAA;KACZ;IAEO,mBAAmB,CACzB,IAAY,EACZ,aAAqB,EACrB,QAAgB;QAEhB,MAAM,UAAU,GAAG,QAAQ,KAAK,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;QAEvD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QAChC,SAAS,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,EAAE,aAAa,CAAC,CAAA;QAC3D,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAEzB,OAAO,IAAI,CAAA;KACZ;IAEO,+CAA+C,CACrD,IAAY,EACZ,UAAsB,EACtB,QAAgB;;QAGhB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;YACpC,MAAM,OAAO,GAAG,IAAI,CAAC,sCAAsC,CACzD,IAAI,EACJ,UAAU,EACV,QAAQ,CACT,CAAA;YACD,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;gBACpE,IAAI,CAAC,cAAc,EAAE,CAAA;gBACrB,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;gBACrD,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAC7B,IAAI,EACJ,UAAU,CAAC,MAAM,GAAG,CAAC,EACrB,QAAQ,CAAC,KAAK,CACf,CAAA;aACF;SACF;QAED,OAAO,IAAI,CAAA;KACZ;IAEO,sCAAsC,CAC5C,IAAY,EACZ,UAAkB,EAClB,QAAgB;QAEhB,QACE,IAAI,CAAC,sCAAsC,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC;YACvE,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,UAAU,CAAC,EAC5C;KACF;IAEO,sCAAsC,CAC5C,IAAY,EACZ,UAAkB,EAClB,QAAgB;QAEhB,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAA;QAC9B,MAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAA;QACvC,MAAM,GAAG,GAAG,KAAK,QAAQ,OAAO,CAAA;QAEhC,QACE,cAAc,CAAC,GAAyB,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC;YACvE,UAAU,GAAG,aAAa;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,EAClC;KACF;IAEO,oBAAoB,CAAC,IAAY,EAAE,UAAkB;QAC3D,QACE,oBAAoB,CAAC,yCAAyC,CAAC,QAAQ,CACrE,UAAU,CACX,IAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,UAAU,CAAC,EACpD;KACF;IAEO,uBAAuB,CAAC,IAAY,EAAE,UAAkB;QAC9D,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CACnC,cAAc,CAAC,oBAAoB,CACpC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;QACtB,IAAI,iBAAiB,EAAE;YACrB,OAAO,IAAI,CAAC,+BAA+B,CACzC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EAC1C,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAChD,CAAA;SACF;QAED,OAAO,KAAK,CAAA;KACb;IAEO,uBAAuB,CAAC,IAAY,EAAE,UAAkB;QAC9D,IAAI,cAAc,GAAG,EAAE,CAAA;QACvB,QAAQ,IAAI;YACV,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACxC,cAAc,GAAG,GAAG,CAAA;gBACpB,MAAK;YACP,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACtC,cAAc,GAAG,IAAI,CAAC,+BAA+B,CACnD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EACzC,cAAsB,CAAC,aAAa,CACtC;sBACG,GAAG;sBACH,GAAG,CAAA;gBACP,MAAK;YACP,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACxC,cAAc,GAAG,GAAG,CAAA;gBACpB,MAAK;YACP,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACtC,cAAc,GAAG,GAAG,CAAA;gBACpB,MAAK;YAEP;gBACE,MAAK;SACR;QACD,MAAM,WAAW,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAA;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;QACvD,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,CAAA;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QAE7C,OAAO,cAAc,GAAG,SAAS,GAAG,cAAc,GAAG,OAAO,GAAG,IAAI,CAAA;KACpE;IAEO,OAAO,CAAC,SAAiB;QAC/B,OAAO,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;KACtD;IAEO,aAAa,CAAC,IAAY,EAAE,IAAI,GAAG,YAAY;QACrD,IAAI,YAAY,CAAA;QAChB,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;QACzC,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;QACnC,IAAI,IAAI,KAAK,YAAY,EAAE;YACzB,YAAY,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAA;SACjC;aAAM;YACL,QAAQ,IAAI;gBACV,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACtB,IAAI,GAAG,MAAM,CAAA;oBACb,MAAK;gBACP,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACtB,IAAI,GAAG,MAAM,CAAA;oBACb,MAAK;gBAEP;oBACE,MAAK;aACR;YACD,YAAY,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAA;SACjC;QACD,MAAM,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAA;QAE/C,MAAM,UAAU,GAAgB,oBAA4B,CAAC,YAAY,CAAC,CAAA;QAE1E,OAAO,UAAU,CAAA;KAClB;IAEO,0CAA0C,CAChD,IAAY,EACZ,UAAkB,EAClB,QAAgB;QAEhB,MAAM,GAAG,GAAG,KAAK,QAAQ,OAAO,CAAA;QAEhC,QACE,cAAc,CAAC,GAAyB,CAAC,CACvC,IAAI,EACJ,IAAI,CAAC,MAAM,EACX,UAAU,CACX,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,EAC/D;KACF;IAEO,uBAAuB,CAC7B,IAAY,EACZ,UAAkB,EAClB,QAAgB;QAEhB,IAAI,QAAQ,KAAK,QAAQ,CAAC,KAAK,EAAE;YAC/B,IAAI,UAAU,KAAK,KAAK,EAAE;gBACxB,OAAO,IAAI,CAAC,+BAA+B,CACzC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EACzB,cAAsB,CAAC,aAAa,CACtC,CAAA;aACF;iBAAM;gBACL,OAAO,KAAK,CAAA;aACb;SACF;aAAM;YACL,OAAQ,cAAc,CAAC,2BAAmC,CACxD,UAAU,CACX,CAAC,IAAI,CAAC,CAAC,aAAqB;gBAC3B,MAAM,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;gBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;oBACtC,OAAO,KAAK,CAAA;iBACb;gBAED,OAAO,cAAc,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;aACnE,CAAC,CAAA;SACH;KACF;IAEO,+BAA+B,CACrC,WAAmB,EACnB,UAAsB;QAEtB,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,KAC1B,cAAc,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CACnE,CAAA;KACF;IAEO,cAAc;QACpB,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAA;KAC5B;;AAnbM,0BAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;AACjC,wCAAmB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;AAC3C,kDAA6B,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;AACnD,kDAA6B,GAAG;IACrC,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,IAAI;IACJ,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,IAAI;IACJ,KAAK;IACL,IAAI;CACL,CAAA;AACM,0DAAqC,GAAG;IAC7C,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;CACN,CAAA;AACM,mDAA8B,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC3D,2DAAsC,GAAG,CAAC,IAAI,CAAC,CAAA;AAC/C,+DAA0C,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AACjE,sDAAiC,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAA;AACtE,sCAAiB,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;AACtC,8DAAyC,GAAG;IACjD,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;CACN,CAAA;AAEM,+BAAU,GAAG,CAAC,CAAA;AACd,iCAAY,GAAG,CAAC,CAAA;AAChB,+BAAU,GAAG,CAAC,CAAA;AACd,iCAAY,GAAG,CAAC,CAAA;AAChB,gCAAW,GAAG,EAAE,CAAA;AAChB,gCAAW,GAAG,EAAE,CAAA;AAChB,+BAAU,GAAG,EAAE,CAAA;;AChExB,MAAM,OAAQ,SAAQ,oBAAoB;IAA1C;;QACE,SAAI,GAAG,CAAC,IAAY,EAAE,oBAAoB,GAAG,IAAI;YAC/C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAA;YACtB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;aACzC;iBAAM;gBACL,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;gBAClD,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;oBAClC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;iBACjC;gBACD,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;oBAClC,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAA;iBAC1C;gBACD,IAAI,oBAAoB,EAAE;oBACxB,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;iBACnC;aACF;YAED,OAAO,IAAI,CAAA;SACZ,CAAA;KA8BF;IA5BS,gBAAgB,CAAC,IAAY;QACnC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;SACzC;QACD,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;YACtB,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBAClC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;aAC/B;YACD,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,EAAE;gBAC5B,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAA;aAC1C;SACF;aAAM;YACL,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBAClC,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAA;aAC1C;YACD,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBAClC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;aAC/B;SACF;QAED,OAAO,IAAI,CAAA;KACZ;IAEO,uBAAuB;QAC7B,OAAO,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAA;KAClC;CACF;AAED,cAAe,IAAI,OAAO,EAAE,CAAA;;ACnDrB,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;AAC/B,YAAe,EAAE,IAAI,EAAE,CAAA;;;;;"}