{"version":3,"file":"index.esm.min.js","sources":["../../src/lib/irregular-words.ts","../../src/lib/stemmer-utility.ts","../../src/lib/morphological-utility.ts","../../src/stemmer.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable:no-any\n\nexport default class IrregularWords {\n  static SPECIAL_LETTERS = ['K', 'P', 'N', 'R']\n  static ENDS_WITH_I = IrregularWords.loadWords('akhiran-i')\n\n  static ENDS_WITH_COMMON_CHARACTERS = {\n    kah: IrregularWords.loadWords('kah'),\n    lah: IrregularWords.loadWords('lah'),\n    pun: IrregularWords.loadWords('pun'),\n    ku: IrregularWords.loadWords('ku'),\n    mu: IrregularWords.loadWords('mu'),\n    nya: IrregularWords.loadWords('nya'),\n  }\n\n  static ENDS_WITH_SUFFIX_CHARACTERS = ['majikan'].concat(\n    IrregularWords.ENDS_WITH_I\n  )\n  static ON_PREFIX_CHARACTERS: any\n\n  static loadWords(filename: string, chopped = false) {\n    let contents: string[] = require(`./irregular-words/${filename}`).default\n\n    if (chopped) {\n      contents = contents.map((word) => word.slice(1, word.length))\n    }\n\n    return contents\n  }\n}\n\nIrregularWords.SPECIAL_LETTERS.map((letter) => {\n  // console.log(letter);\n  ;(IrregularWords as any)[`BEGINS_WITH_${letter}`] = IrregularWords.loadWords(\n    `${letter.toLowerCase()}`,\n    true\n  )\n})\n;(IrregularWords as any).ON_PREFIX_CHARACTERS = {\n  meng: (IrregularWords as any).BEGINS_WITH_K,\n  peng: (IrregularWords as any).BEGINS_WITH_K,\n  mem: (IrregularWords as any).BEGINS_WITH_P,\n  pem: (IrregularWords as any).BEGINS_WITH_P,\n}\n","function isStartsWith(\n  text: string,\n  byTextLength: number,\n  prefix: string\n): boolean {\n  const prefixLength = prefix.length\n  if (prefixLength > byTextLength) return false\n  for (let i = 0; i < prefixLength; i++) {\n    if (text[i] !== prefix[i]) return false\n  }\n\n  return true\n}\n\nfunction isEndsWith(\n  text: string,\n  byTextLength: number,\n  suffix: string\n): boolean {\n  const suffixLength = suffix.length\n  if (suffixLength > byTextLength) return false\n  for (let i = 0; i < suffixLength; i++) {\n    if (text.substring(text.length - suffixLength)[i] !== suffix[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport interface PositionType {\n  isStartsWith: string\n  isEndsWith: string\n}\n\nexport default {\n  isStartsWith,\n  isEndsWith,\n}\n","// tslint:disable:no-any\nimport IrregularWords from './irregular-words'\nimport StemmerUtility, { PositionType } from './stemmer-utility'\n\ntype Characters = string[]\n\nconst AMBIGUOUS_WORDS = [\n  'nyanyi',\n  'nyala',\n  'nyata',\n  'nasehat',\n  'makan',\n  'minum',\n  'nikah',\n]\n\nenum Position {\n  start = 'Start',\n  end = 'End',\n}\nexport default class MorphologicalUtility {\n  static VOWEL = ['a', 'e', 'i', 'o', 'u']\n  static PARTICLE_CHARACTERS = ['kah', 'lah', 'pun']\n  static POSSESSIVE_PRONOUN_CHARACTERS = ['ku', 'mu', 'nya']\n  static FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'meny',\n    'men',\n    'mem',\n    'me',\n    'peng',\n    'peny',\n    'pen',\n    'pem',\n    'di',\n    'ter',\n    'ke',\n  ]\n  static SPECIAL_FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'peng',\n    'meny',\n    'peny',\n    'pen',\n    'men',\n    'mem',\n    'pem',\n  ]\n  static SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'be', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['be']\n  static NON_SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_WORDS = ['belajar', 'pelajar', 'belunjur']\n  static SUFFIX_CHARACTERS = ['kan', 'an', 'i']\n  static WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS = [\n    'meny',\n    'peny',\n    'men',\n    'pen',\n  ]\n\n  static REMOVED_KE = 1\n  static REMOVED_PENG = 2\n  static REMOVED_DI = 4\n  static REMOVED_MENG = 8\n  static REMOVED_TER = 16\n  static REMOVED_BER = 32\n  static REMOVED_PE = 64\n\n  numberOfSyllables = 0\n  private _flags: any\n\n  set flags(v: any) {\n    this._flags = v\n  }\n\n  get flags() {\n    return this._flags\n  }\n\n  totalSyllables = (word: string) => {\n    let result = 0\n\n    for (const value of word) {\n      if (this.isVowel(value)) result++\n    }\n\n    return result\n  }\n\n  removeParticle = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('particle'),\n      Position.end\n    )\n\n    return word\n  }\n\n  removePossessivePronoun = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('possessive_pronoun'),\n      Position.end\n    )\n  }\n\n  removeFirstOrderPrefix = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const prevWord = word\n    word = this.removeAndSubstituteCharactersMatchingCollection(\n      word,\n      this.collectionFor('special_first_order_prefix'),\n      Position.start\n    )\n    if (prevWord !== word) {\n      return word\n    }\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('first_order_prefix'),\n      Position.start\n    )\n\n    return word\n  }\n\n  removeSecondOrderPrefix = (word: string) => {\n    const {\n      REMOVED_BER,\n      SPECIAL_SECOND_ORDER_PREFIX_WORDS,\n    } = MorphologicalUtility\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const wordLength = word.length\n    if (SPECIAL_SECOND_ORDER_PREFIX_WORDS.includes(word)) {\n      if (word.slice(0, 2) === 'be') {\n        this.flags = this.flags || REMOVED_BER\n      }\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 3, Position.start)\n\n      return word\n    }\n\n    if (\n      StemmerUtility.isStartsWith(word, wordLength, 'be') &&\n      wordLength > 4 &&\n      !this.isVowel(word[2]) &&\n      word.slice(3, 5) === 'er'\n    ) {\n      this.flags = this.flags || REMOVED_BER\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 2, Position.start)\n\n      return word\n    }\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('non_special_second_order_prefix'),\n      Position.start\n    )\n  }\n\n  removeSuffix = (word: string) => {\n    const {\n      REMOVED_KE,\n      REMOVED_PENG,\n      REMOVED_PE,\n      REMOVED_DI,\n      REMOVED_MENG,\n      REMOVED_TER,\n      REMOVED_BER,\n      SUFFIX_CHARACTERS,\n    } = MorphologicalUtility\n    if (this.ambiguousWithSufficesEndingWords(word)) return word\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    let constantToCheck: number[] = []\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < SUFFIX_CHARACTERS.length; index++) {\n      const character = SUFFIX_CHARACTERS[index]\n      switch (character) {\n        case 'kan':\n          constantToCheck = [REMOVED_KE, REMOVED_PENG, REMOVED_PE]\n          break\n        case 'an':\n          constantToCheck = [REMOVED_DI, REMOVED_MENG, REMOVED_TER]\n          break\n\n        case 'i':\n          constantToCheck = [REMOVED_BER, REMOVED_KE, REMOVED_PENG]\n          break\n\n        default:\n          break\n      }\n\n      if (\n        StemmerUtility.isEndsWith(word, word.length, character) &&\n        // tslint:disable-next-line:no-bitwise\n        constantToCheck.every((cons) => (this.flags & cons) === 0)\n      ) {\n        this.reduceSyllable()\n        word = this.sliceWordAtPosition(word, character.length, Position.end)\n      }\n    }\n\n    return word\n  }\n\n  private ambiguousWithSufficesEndingWords(word: string) {\n    return IrregularWords.ENDS_WITH_SUFFIX_CHARACTERS.includes(word)\n  }\n\n  private removeCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      if (\n        this.matchPositionAndNotAmbiguousWithCharacters(\n          word,\n          characters,\n          position\n        )\n      ) {\n        if (characters === 'mem' && this.isVowel(word[characters.length])) {\n          continue\n        }\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n\n        word = this.sliceWordAtPosition(word, characters.length, position)\n      }\n    }\n\n    return word\n  }\n\n  private sliceWordAtPosition(\n    word: string,\n    characterSize: number,\n    position: string\n  ) {\n    const multiplier = position === Position.start ? 0 : -1\n\n    const wordSlice = word.split('')\n    wordSlice.splice(multiplier * characterSize, characterSize)\n    word = wordSlice.join('')\n\n    return word\n  }\n\n  private removeAndSubstituteCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      const matched = this.matchingCharactersRequiresSubstitution(\n        word,\n        characters,\n        position\n      )\n      if (matched) {\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n        word = this.substituteWordCharacter(word, characters)\n        word = this.sliceWordAtPosition(\n          word,\n          characters.length - 1,\n          Position.start\n        )\n      }\n    }\n\n    return word\n  }\n\n  private matchingCharactersRequiresSubstitution(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    return (\n      this.matchCharactersPositionFollowedByVowel(word, characters, position) &&\n      this.substitutionRequired(word, characters)\n    )\n  }\n\n  private matchCharactersPositionFollowedByVowel(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const wordLength = word.length\n    const characterSize = characters.length\n    const Pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[Pos as keyof PositionType](word, wordLength, characters) &&\n      wordLength > characterSize &&\n      this.isVowel(word[characterSize])\n    )\n  }\n\n  private substitutionRequired(word: string, characters: string) {\n    return (\n      MorphologicalUtility.WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS.includes(\n        characters\n      ) || this.containsIrregularPrefix(word, characters)\n    )\n  }\n\n  private containsIrregularPrefix(word: string, characters: string) {\n    const irregularOnPrefix = Object.keys(\n      IrregularWords.ON_PREFIX_CHARACTERS\n    ).includes(characters)\n    if (irregularOnPrefix) {\n      return this.choppedWordMatchWordsCollection(\n        word.slice(characters.length, word.length),\n        IrregularWords.ON_PREFIX_CHARACTERS[characters]\n      )\n    }\n\n    return false\n  }\n\n  private substituteWordCharacter(word: string, characters: string) {\n    let substituteChar = ''\n    switch (true) {\n      case ['meny', 'peny'].includes(characters):\n        substituteChar = 's'\n        break\n      case ['men', 'pen'].includes(characters):\n        substituteChar = this.choppedWordMatchWordsCollection(\n          word.slice(characters.length, word.length),\n          (IrregularWords as any).BEGINS_WITH_N\n        )\n          ? 'n'\n          : 't'\n        break\n      case ['meng', 'peng'].includes(characters):\n        substituteChar = 'k'\n        break\n      case ['mem', 'pem'].includes(characters):\n        substituteChar = 'p'\n        break\n\n      default:\n        break\n    }\n    const reduceChars = characters.length - 1\n    const firstChar = word.slice(-word.length, reduceChars)\n    const oldSubstituteChar = word[reduceChars]\n    const resChar = word.slice(characters.length)\n\n    return substituteChar ? firstChar + substituteChar + resChar : word\n  }\n\n  private isVowel(character: string) {\n    return MorphologicalUtility.VOWEL.includes(character)\n  }\n\n  private collectionFor(name: string, type = 'characters') {\n    let constantName\n    const col1 = ['meny', 'men', 'mem', 'me']\n    const col2 = ['peny', 'pen', 'pem']\n    if (type === 'characters') {\n      constantName = `${name}_${type}`\n    } else {\n      switch (true) {\n        case col1.includes(name):\n          name = 'meng'\n          break\n        case col2.includes(name):\n          name = 'peng'\n          break\n\n        default:\n          break\n      }\n      constantName = `${type}_${name}`\n    }\n    const staticMethod = constantName.toUpperCase()\n\n    const collection: Characters = (MorphologicalUtility as any)[staticMethod]\n\n    return collection\n  }\n\n  private matchPositionAndNotAmbiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[pos as keyof PositionType](\n        word,\n        word.length,\n        characters\n      ) && !this.ambiguousWithCharacters(word, characters, position)\n    )\n  }\n\n  private ambiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    if (position === Position.start) {\n      if (characters === 'per') {\n        return this.choppedWordMatchWordsCollection(\n          word.slice(3, word.length),\n          (IrregularWords as any).BEGINS_WITH_R\n        )\n      } else {\n        return false\n      }\n    } else {\n      return (IrregularWords.ENDS_WITH_COMMON_CHARACTERS as any)[\n        characters\n      ].some((ambiguousWord: string) => {\n        const prefix = ['me', 'be', 'pe']\n        if (!prefix.includes(word.slice(0, 2))) {\n          return false\n        }\n\n        return StemmerUtility.isEndsWith(word, word.length, ambiguousWord)\n      })\n    }\n  }\n\n  private choppedWordMatchWordsCollection(\n    choppedWord: string,\n    collection: Characters\n  ) {\n    return collection.some((word) =>\n      StemmerUtility.isStartsWith(choppedWord, choppedWord.length, word)\n    )\n  }\n\n  private reduceSyllable() {\n    this.numberOfSyllables -= 1\n  }\n}\n","import MorphologicalUtility from './lib/morphological-utility'\n\nclass Stemmer extends MorphologicalUtility {\n  stem = (word: string, derivationalStemming = true) => {\n    this.flags = undefined\n    if (word.match(/\\s/)) {\n      word.split(' ').map((w) => this.stem(w))\n    } else {\n      this.numberOfSyllables = this.totalSyllables(word)\n      if (this.isStillHasManySyllables()) {\n        word = this.removeParticle(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removePossessivePronoun(word)\n      }\n      if (derivationalStemming) {\n        word = this.stemDerivational(word)\n      }\n    }\n\n    return word\n  }\n\n  private stemDerivational(word: string) {\n    let prevSize = word.length\n    if (this.isStillHasManySyllables()) {\n      word = this.removeFirstOrderPrefix(word)\n    }\n    if (prevSize !== word.length) {\n      prevSize = word.length\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n      if (prevSize !== word.length) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n    } else {\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n    }\n\n    return word\n  }\n\n  private isStillHasManySyllables() {\n    return this.numberOfSyllables > 2\n  }\n}\n\nexport default new Stemmer()\n","import stemmer from './stemmer'\n\nexport const { stem } = stemmer\nexport default { stem }\n"],"names":["IrregularWords","[object Object]","filename","chopped","contents","require","default","map","word","slice","length","isStartsWith","text","byTextLength","prefix","prefixLength","i","isEndsWith","suffix","suffixLength","substring","loadWords","kah","lah","pun","ku","mu","nya","concat","ENDS_WITH_I","SPECIAL_LETTERS","letter","toLowerCase","ON_PREFIX_CHARACTERS","meng","BEGINS_WITH_K","peng","mem","BEGINS_WITH_P","pem","Position","MorphologicalUtility","this","result","value","isVowel","numberOfSyllables","totalSyllables","removeCharactersMatchingCollection","collectionFor","end","removeAndSubstituteCharactersMatchingCollection","start","REMOVED_BER","SPECIAL_SECOND_ORDER_PREFIX_WORDS","wordLength","includes","flags","reduceSyllable","sliceWordAtPosition","StemmerUtility","REMOVED_KE","REMOVED_PENG","REMOVED_PE","REMOVED_DI","REMOVED_MENG","REMOVED_TER","SUFFIX_CHARACTERS","ambiguousWithSufficesEndingWords","constantToCheck","index","character","every","cons","v","_flags","ENDS_WITH_SUFFIX_CHARACTERS","collection","position","characters","matchPositionAndNotAmbiguousWithCharacters","characterSize","multiplier","wordSlice","split","splice","join","matchingCharactersRequiresSubstitution","substituteWordCharacter","matchCharactersPositionFollowedByVowel","substitutionRequired","WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS","containsIrregularPrefix","Object","keys","choppedWordMatchWordsCollection","substituteChar","BEGINS_WITH_N","reduceChars","firstChar","resChar","VOWEL","name","type","constantName","col2","staticMethod","toUpperCase","ambiguousWithCharacters","BEGINS_WITH_R","ENDS_WITH_COMMON_CHARACTERS","some","ambiguousWord","choppedWord","Stemmer","derivationalStemming","undefined","match","w","stem","isStillHasManySyllables","removeParticle","removePossessivePronoun","stemDerivational","prevSize","removeFirstOrderPrefix","removeSuffix","removeSecondOrderPrefix","stemmer"],"mappings":"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"}