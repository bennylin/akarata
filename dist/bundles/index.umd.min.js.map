{"version":3,"file":"index.umd.min.js","sources":["../../src/lib/irregular-words.ts","../../src/lib/morphological-utility.ts","../../src/lib/stemmer-utility.ts","../../src/index.ts","../../src/stemmer.ts"],"sourcesContent":["// tslint:disable:no-any\n\nexport default class IrregularWords {\n  static SPECIAL_LETTERS = ['K', 'P', 'N', 'R']\n  static ENDS_WITH_I = IrregularWords.loadWords('akhiran-i')\n\n  static ENDS_WITH_COMMON_CHARACTERS = {\n    kah: IrregularWords.loadWords('kah'),\n    lah: IrregularWords.loadWords('lah'),\n    pun: IrregularWords.loadWords('pun'),\n    ku: IrregularWords.loadWords('ku'),\n    mu: IrregularWords.loadWords('mu'),\n    nya: IrregularWords.loadWords('nya'),\n  }\n\n  static ENDS_WITH_SUFFIX_CHARACTERS = ['majikan'].concat(\n    IrregularWords.ENDS_WITH_I\n  )\n  static ON_PREFIX_CHARACTERS: any\n\n  static loadWords(filename: string, chopped = false) {\n    let contents: string[] = require(`./irregular-words/${filename}`).default\n\n    if (chopped) {\n      contents = contents.map((word) => word.slice(1, word.length))\n    }\n\n    return contents\n  }\n}\n\nIrregularWords.SPECIAL_LETTERS.map((letter) => {\n  // console.log(letter);\n  ;(IrregularWords as any)[`BEGINS_WITH_${letter}`] = IrregularWords.loadWords(\n    `${letter.toLowerCase()}`,\n    true\n  )\n})\n;(IrregularWords as any).ON_PREFIX_CHARACTERS = {\n  meng: (IrregularWords as any).BEGINS_WITH_K,\n  peng: (IrregularWords as any).BEGINS_WITH_K,\n  mem: (IrregularWords as any).BEGINS_WITH_P,\n  pem: (IrregularWords as any).BEGINS_WITH_P,\n}\n","// tslint:disable:no-any\nimport IrregularWords from './irregular-words'\nimport StemmerUtility, { PositionType } from './stemmer-utility'\n\ntype Characters = string[]\n\nconst AMBIGUOUS_WORDS = [\n  'nyanyi',\n  'nyala',\n  'nyata',\n  'nasehat',\n  'makan',\n  'minum',\n  'nikah',\n]\n\nenum Position {\n  start = 'Start',\n  end = 'End',\n}\nexport default class MorphologicalUtility {\n  static VOWEL = ['a', 'e', 'i', 'o', 'u']\n  static PARTICLE_CHARACTERS = ['kah', 'lah', 'pun']\n  static POSSESSIVE_PRONOUN_CHARACTERS = ['ku', 'mu', 'nya']\n  static FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'meny',\n    'men',\n    'mem',\n    'me',\n    'peng',\n    'peny',\n    'pen',\n    'pem',\n    'di',\n    'ter',\n    'ke',\n  ]\n  static SPECIAL_FIRST_ORDER_PREFIX_CHARACTERS = [\n    'meng',\n    'peng',\n    'meny',\n    'peny',\n    'pen',\n    'men',\n    'mem',\n    'pem',\n  ]\n  static SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'be', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['be']\n  static NON_SPECIAL_SECOND_ORDER_PREFIX_CHARACTERS = ['ber', 'per', 'pe']\n  static SPECIAL_SECOND_ORDER_PREFIX_WORDS = ['belajar', 'pelajar', 'belunjur']\n  static SUFFIX_CHARACTERS = ['kan', 'an', 'i']\n  static WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS = [\n    'meny',\n    'peny',\n    'men',\n    'pen',\n  ]\n\n  static REMOVED_KE = 1\n  static REMOVED_PENG = 2\n  static REMOVED_DI = 4\n  static REMOVED_MENG = 8\n  static REMOVED_TER = 16\n  static REMOVED_BER = 32\n  static REMOVED_PE = 64\n\n  numberOfSyllables = 0\n  private _flags: any\n\n  set flags(v: any) {\n    this._flags = v\n  }\n\n  get flags() {\n    return this._flags\n  }\n\n  totalSyllables = (word: string) => {\n    let result = 0\n\n    for (const value of word) {\n      if (this.isVowel(value)) result++\n    }\n\n    return result\n  }\n\n  removeParticle = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('particle'),\n      Position.end\n    )\n\n    return word\n  }\n\n  removePossessivePronoun = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('possessive_pronoun'),\n      Position.end\n    )\n  }\n\n  removeFirstOrderPrefix = (word: string) => {\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const prevWord = word\n    word = this.removeAndSubstituteCharactersMatchingCollection(\n      word,\n      this.collectionFor('special_first_order_prefix'),\n      Position.start\n    )\n    if (prevWord !== word) {\n      return word\n    }\n\n    word = this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('first_order_prefix'),\n      Position.start\n    )\n\n    return word\n  }\n\n  removeSecondOrderPrefix = (word: string) => {\n    const {\n      REMOVED_BER,\n      SPECIAL_SECOND_ORDER_PREFIX_WORDS,\n    } = MorphologicalUtility\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    const wordLength = word.length\n    if (SPECIAL_SECOND_ORDER_PREFIX_WORDS.includes(word)) {\n      if (word.slice(0, 2) === 'be') {\n        this.flags = this.flags || REMOVED_BER\n      }\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 3, Position.start)\n\n      return word\n    }\n\n    if (\n      StemmerUtility.isStartsWith(word, wordLength, 'be') &&\n      wordLength > 4 &&\n      !this.isVowel(word[2]) &&\n      word.slice(3, 5) === 'er'\n    ) {\n      this.flags = this.flags || REMOVED_BER\n      this.reduceSyllable()\n      word = this.sliceWordAtPosition(word, 2, Position.start)\n\n      return word\n    }\n\n    return this.removeCharactersMatchingCollection(\n      word,\n      this.collectionFor('non_special_second_order_prefix'),\n      Position.start\n    )\n  }\n\n  removeSuffix = (word: string) => {\n    const {\n      REMOVED_KE,\n      REMOVED_PENG,\n      REMOVED_PE,\n      REMOVED_DI,\n      REMOVED_MENG,\n      REMOVED_TER,\n      REMOVED_BER,\n      SUFFIX_CHARACTERS,\n    } = MorphologicalUtility\n    if (this.ambiguousWithSufficesEndingWords(word)) return word\n    this.numberOfSyllables = this.numberOfSyllables || this.totalSyllables(word)\n    let constantToCheck: number[] = []\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < SUFFIX_CHARACTERS.length; index++) {\n      const character = SUFFIX_CHARACTERS[index]\n      switch (character) {\n        case 'kan':\n          constantToCheck = [REMOVED_KE, REMOVED_PENG, REMOVED_PE]\n          break\n        case 'an':\n          constantToCheck = [REMOVED_DI, REMOVED_MENG, REMOVED_TER]\n          break\n\n        case 'i':\n          constantToCheck = [REMOVED_BER, REMOVED_KE, REMOVED_PENG]\n          break\n\n        default:\n          break\n      }\n\n      if (\n        StemmerUtility.isEndsWith(word, word.length, character) &&\n        // tslint:disable-next-line:no-bitwise\n        constantToCheck.every((cons) => (this.flags & cons) === 0)\n      ) {\n        this.reduceSyllable()\n        word = this.sliceWordAtPosition(word, character.length, Position.end)\n      }\n    }\n\n    return word\n  }\n\n  private ambiguousWithSufficesEndingWords(word: string) {\n    return IrregularWords.ENDS_WITH_SUFFIX_CHARACTERS.includes(word)\n  }\n\n  private removeCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      if (\n        this.matchPositionAndNotAmbiguousWithCharacters(\n          word,\n          characters,\n          position\n        )\n      ) {\n        if (characters === 'mem' && this.isVowel(word[characters.length])) {\n          continue\n        }\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n\n        word = this.sliceWordAtPosition(word, characters.length, position)\n      }\n    }\n\n    return word\n  }\n\n  private sliceWordAtPosition(\n    word: string,\n    characterSize: number,\n    position: string\n  ) {\n    const multiplier = position === Position.start ? 0 : -1\n\n    const wordSlice = word.split('')\n    wordSlice.splice(multiplier * characterSize, characterSize)\n    word = wordSlice.join('')\n\n    return word\n  }\n\n  private removeAndSubstituteCharactersMatchingCollection(\n    word: string,\n    collection: Characters,\n    position: string\n  ) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < collection.length; index++) {\n      const characters = collection[index]\n      const matched = this.matchingCharactersRequiresSubstitution(\n        word,\n        characters,\n        position\n      )\n      if (matched) {\n        this.flags = this.flags || this.collectionFor(characters, 'removed')\n        this.reduceSyllable()\n        word = this.substituteWordCharacter(word, characters)\n        word = this.sliceWordAtPosition(\n          word,\n          characters.length - 1,\n          Position.start\n        )\n      }\n    }\n\n    return word\n  }\n\n  private matchingCharactersRequiresSubstitution(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    return (\n      this.matchCharactersPositionFollowedByVowel(word, characters, position) &&\n      this.substitutionRequired(word, characters)\n    )\n  }\n\n  private matchCharactersPositionFollowedByVowel(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const wordLength = word.length\n    const characterSize = characters.length\n    const Pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[Pos as keyof PositionType](word, wordLength, characters) &&\n      wordLength > characterSize &&\n      this.isVowel(word[characterSize])\n    )\n  }\n\n  private substitutionRequired(word: string, characters: string) {\n    return (\n      MorphologicalUtility.WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS.includes(\n        characters\n      ) || this.containsIrregularPrefix(word, characters)\n    )\n  }\n\n  private containsIrregularPrefix(word: string, characters: string) {\n    const irregularOnPrefix = Object.keys(\n      IrregularWords.ON_PREFIX_CHARACTERS\n    ).includes(characters)\n    if (irregularOnPrefix) {\n      return this.choppedWordMatchWordsCollection(\n        word.slice(characters.length, word.length),\n        IrregularWords.ON_PREFIX_CHARACTERS[characters]\n      )\n    }\n\n    return false\n  }\n\n  private substituteWordCharacter(word: string, characters: string) {\n    let substituteChar = ''\n    switch (true) {\n      case ['meny', 'peny'].includes(characters):\n        substituteChar = 's'\n        break\n      case ['men', 'pen'].includes(characters):\n        substituteChar = this.choppedWordMatchWordsCollection(\n          word.slice(characters.length, word.length),\n          (IrregularWords as any).BEGINS_WITH_N\n        )\n          ? 'n'\n          : 't'\n        break\n      case ['meng', 'peng'].includes(characters):\n        substituteChar = 'k'\n        break\n      case ['mem', 'pem'].includes(characters):\n        substituteChar = 'p'\n        break\n\n      default:\n        break\n    }\n    const reduceChars = characters.length - 1\n    const firstChar = word.slice(-word.length, reduceChars)\n    const oldSubstituteChar = word[reduceChars]\n    const resChar = word.slice(characters.length)\n\n    return substituteChar ? firstChar + substituteChar + resChar : word\n  }\n\n  private isVowel(character: string) {\n    return MorphologicalUtility.VOWEL.includes(character)\n  }\n\n  private collectionFor(name: string, type = 'characters') {\n    let constantName\n    const col1 = ['meny', 'men', 'mem', 'me']\n    const col2 = ['peny', 'pen', 'pem']\n    if (type === 'characters') {\n      constantName = `${name}_${type}`\n    } else {\n      switch (true) {\n        case col1.includes(name):\n          name = 'meng'\n          break\n        case col2.includes(name):\n          name = 'peng'\n          break\n\n        default:\n          break\n      }\n      constantName = `${type}_${name}`\n    }\n    const staticMethod = constantName.toUpperCase()\n\n    const collection: Characters = (MorphologicalUtility as any)[staticMethod]\n\n    return collection\n  }\n\n  private matchPositionAndNotAmbiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    const pos = `is${position}sWith`\n\n    return (\n      StemmerUtility[pos as keyof PositionType](\n        word,\n        word.length,\n        characters\n      ) && !this.ambiguousWithCharacters(word, characters, position)\n    )\n  }\n\n  private ambiguousWithCharacters(\n    word: string,\n    characters: string,\n    position: string\n  ) {\n    if (position === Position.start) {\n      if (characters === 'per') {\n        return this.choppedWordMatchWordsCollection(\n          word.slice(3, word.length),\n          (IrregularWords as any).BEGINS_WITH_R\n        )\n      } else {\n        return false\n      }\n    } else {\n      return (IrregularWords.ENDS_WITH_COMMON_CHARACTERS as any)[\n        characters\n      ].some((ambiguousWord: string) => {\n        const prefix = ['me', 'be', 'pe']\n        if (!prefix.includes(word.slice(0, 2))) {\n          return false\n        }\n\n        return StemmerUtility.isEndsWith(word, word.length, ambiguousWord)\n      })\n    }\n  }\n\n  private choppedWordMatchWordsCollection(\n    choppedWord: string,\n    collection: Characters\n  ) {\n    return collection.some((word) =>\n      StemmerUtility.isStartsWith(choppedWord, choppedWord.length, word)\n    )\n  }\n\n  private reduceSyllable() {\n    this.numberOfSyllables -= 1\n  }\n}\n","function isStartsWith(\n  text: string,\n  byTextLength: number,\n  prefix: string\n): boolean {\n  const prefixLength = prefix.length\n  if (prefixLength > byTextLength) return false\n  for (let i = 0; i < prefixLength; i++) {\n    if (text[i] !== prefix[i]) return false\n  }\n\n  return true\n}\n\nfunction isEndsWith(\n  text: string,\n  byTextLength: number,\n  suffix: string\n): boolean {\n  const suffixLength = suffix.length\n  if (suffixLength > byTextLength) return false\n  for (let i = 0; i < suffixLength; i++) {\n    if (text.substring(text.length - suffixLength)[i] !== suffix[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport interface PositionType {\n  isStartsWith: string\n  isEndsWith: string\n}\n\nexport default {\n  isStartsWith,\n  isEndsWith,\n}\n","import stemmer from './stemmer'\n\nexport const { stem } = stemmer\nexport default { stem }\n","import MorphologicalUtility from './lib/morphological-utility'\n\nclass Stemmer extends MorphologicalUtility {\n  stem = (word: string, derivationalStemming = true) => {\n    this.flags = undefined\n    if (word.match(/\\s/)) {\n      word.split(' ').map((w) => this.stem(w))\n    } else {\n      this.numberOfSyllables = this.totalSyllables(word)\n      if (this.isStillHasManySyllables()) {\n        word = this.removeParticle(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removePossessivePronoun(word)\n      }\n      if (derivationalStemming) {\n        word = this.stemDerivational(word)\n      }\n    }\n\n    return word\n  }\n\n  private stemDerivational(word: string) {\n    let prevSize = word.length\n    if (this.isStillHasManySyllables()) {\n      word = this.removeFirstOrderPrefix(word)\n    }\n    if (prevSize !== word.length) {\n      prevSize = word.length\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n      if (prevSize !== word.length) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n    } else {\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSecondOrderPrefix(word)\n      }\n      if (this.isStillHasManySyllables()) {\n        word = this.removeSuffix(word)\n      }\n    }\n\n    return word\n  }\n\n  private isStillHasManySyllables() {\n    return this.numberOfSyllables > 2\n  }\n}\n\nexport default new Stemmer()\n"],"names":["IrregularWords","filename","chopped","contents","require","default","map","word","slice","length","loadWords","kah","lah","pun","ku","mu","nya","concat","ENDS_WITH_I","SPECIAL_LETTERS","letter","toLowerCase","ON_PREFIX_CHARACTERS","meng","BEGINS_WITH_K","peng","mem","BEGINS_WITH_P","pem","Position","isStartsWith","text","byTextLength","prefix","prefixLength","i","isEndsWith","suffix","suffixLength","substring","stem","_this","derivationalStemming","flags","undefined","match","split","w","numberOfSyllables","totalSyllables","isStillHasManySyllables","removeParticle","removePossessivePronoun","stemDerivational","tslib_1.__extends","Stemmer","prevSize","this","removeFirstOrderPrefix","removeSuffix","removeSecondOrderPrefix","result","word_1","_i","value","isVowel","removeCharactersMatchingCollection","collectionFor","end","removeAndSubstituteCharactersMatchingCollection","start","REMOVED_BER","SPECIAL_SECOND_ORDER_PREFIX_WORDS","wordLength","includes","reduceSyllable","sliceWordAtPosition","StemmerUtility","REMOVED_KE","REMOVED_PENG","REMOVED_PE","REMOVED_DI","REMOVED_MENG","REMOVED_TER","SUFFIX_CHARACTERS","ambiguousWithSufficesEndingWords","constantToCheck","index","character","every","cons","Object","MorphologicalUtility","_flags","v","ENDS_WITH_SUFFIX_CHARACTERS","collection","position","characters","matchPositionAndNotAmbiguousWithCharacters","characterSize","multiplier","wordSlice","splice","join","matchingCharactersRequiresSubstitution","substituteWordCharacter","matchCharactersPositionFollowedByVowel","substitutionRequired","WITH_VOWEL_SUBSTITUTION_PREFIX_CHARACTERS","containsIrregularPrefix","keys","choppedWordMatchWordsCollection","substituteChar","BEGINS_WITH_N","reduceChars","firstChar","resChar","VOWEL","name","type","constantName","toUpperCase","ambiguousWithCharacters","BEGINS_WITH_R","ENDS_WITH_COMMON_CHARACTERS","some","ambiguousWord","choppedWord"],"mappings":"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"}